# Template for GNU gfortran on Linux or Mac OSX
#
# DART software - Copyright 2004 - 2013 UCAR. This open source software is
# provided by UCAR, "as is", without charge, subject to all terms of use at
# http://www.image.ucar.edu/DAReS/DART/DART_download
#
# DART $Id$

# typical use with mkmf
# mkmf -t mkmf.template.xxxx ...
#
# Suggested (perhaps required) flags:
# -ffree-line-length-none   handles "long" lines - i.e. longer than 72 chars
#
# Suggested debugging flags:
#  -g                  add debugging information to executable
#  -Wuninitialized     catch uninitialized variables
#  -Wunused            issue warning for unused variables - keeps code clean
#  -fbacktrace         runtime errors try to print out a stack backtrace
#  -fbounds-check      add runtime-checking for out-of-range array indices
#  -ffpe-trap=invalid,zero,overflow
#                      stop on floating point errors
#
#  earlier versions of this mkmf file listed 'precision' as one of the options on
#  the fpe-trap line.  this is not recommended anymore as some of the gfortran internal
#  routines will trap, as well as some perfectly valid DART computations.
#
# Generally not needed but possibly useful for non-DART code:
#
# -ffree-form          forces input file to be read as free format regardless
#                      of what file extension it has.
#
# -fdefault-real-8     force all real variables to be real*8.  not needed for DART code
#                      since all real variables in DART are declared with a size.
#
#    NOTE: Some previous versions of the gfortran compiler (including 4.1.2)
#    changed the record marker size to 8 bytes, which made binary files written
#    with the 'unformatted' option unreadable by programs compiled with other
#    compilers.  Later versions of the compiler changed the default back to 4 bytes.
#    If you have a version that defaults to 8 byte record markers, use this 
#    compile time flag:
#       -frecord-marker=4
#    If you have files written by older versions of the gfortran compiler that
#    cannot be read now, try this compile time flag:
#       -frecord-marker=8 
#
# Convert big-endian or little-endian binary files at runtime:
#
# setenv GFORTRAN_CONVERT_UNIT 'big_endian'
#    Treats ALL units as big_endian
#
# setenv GFORTRAN_CONVERT_UNIT 'big_endian;native:10-20'
#    Treats units 10-20 as big_endian but the rest are 'native' 
#
# for more information on unit conversions:
# http://gcc.gnu.org/onlinedocs/gfortran/GFORTRAN_005fCONVERT_005fUNIT.html#GFORTRAN_005fCONVERT_005fUNIT
#

MPIFC = mpif90
MPILD = mpif90
FC = gfortran
LD = gfortran

# DISCUSSION ABOUT NETCDF. DART works with both V3 and V4 flavors of netCDF.
# Some V4 installations also require the HDF5 libraries. Some don't.
# Some netCDF installations require both -lnetcdff and -lnetcdf, some only
# require -lnetcdf. The permutations make it difficult to cover the possible
# installations. Here are some candidates, you might just have to resort to
# trial and error:
# LIBS = -L$(NETCDF)/lib -lnetcdf
# LIBS = -L$(NETCDF)/lib -lnetcdff -lnetcdf
# LIBS = -L$(NETCDF)/lib -lnetcdf           -lcurl -lhdf5_hl -lhdf5 -lz -lm
# LIBS = -L$(NETCDF)/lib -lnetcdff -lnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm
#
# If you get an error "ld: library not found for -lnetcdff" (note 2 f's),
# remove it from the LIBS line. The same is true for any library. If 'ld'
# does not complain - it worked.

# If your NETCDF environment variable is not set correctly,
# uncomment the following line and set value to where lib and include
# are found for the netcdf files that match this compiler.
#
# NETCDF = /opt/local

INCS = -I$(NETCDF)/include
LIBS = -L$(NETCDF)/lib -lnetcdff -lnetcdf
FFLAGS  = -O2 -ffree-line-length-none $(INCS)
LDFLAGS = $(FFLAGS) $(LIBS)

# FFLAGS = -g -Wuninitialized -Wunused -ffree-line-length-none -fbounds-check \
#          -fbacktrace -ffpe-trap=invalid,zero,overflow $(INCS)

# <next few lines under version control, do not edit>
# $URL$
# $Revision$
# $Date$

