&perfect_model_obs_nml
   start_from_restart       = .true.
   output_restart           = .true.
   async                    = 2
   init_time_days           = -1
   init_time_seconds        = -1
   first_obs_days           = -1
   first_obs_seconds        = -1
   last_obs_days            = -1
   last_obs_seconds         = -1
   output_interval          = 1
   restart_in_file_name     = "filter_ic.0001"
   restart_out_file_name    = "perfect_restart"
   obs_seq_in_file_name     = "obs_seq.in"
   obs_seq_out_file_name    = "obs_seq.out"
   adv_ens_command          = "./advance_model.csh"
   output_timestamps        = .false.
   trace_execution          = .true.
   output_forward_op_errors = .false.
   print_every_nth_obs      = -1
   silence                  = .false.
  /

&filter_nml
   async                    = 4
   adv_ens_command          = "./advance_model.csh"
   ens_size                 = 10
   start_from_restart       = .true.
   output_restart           = .true.
   obs_sequence_in_name     = "obs_seq.out"
   obs_sequence_out_name    = "obs_seq.final"
   restart_in_file_name     = "filter_ic"
   restart_out_file_name    = "filter_restart"
   init_time_days           = -1
   init_time_seconds        = -1
   first_obs_days           = -1
   first_obs_seconds        = -1
   last_obs_days            = -1
   last_obs_seconds         = -1
   num_output_state_members = 5
   num_output_obs_members   = 5
   output_interval          = 1
   num_groups               = 1
   input_qc_threshold       = 3.0
   outlier_threshold        = 3.0
   output_forward_op_errors = .false.
   output_timestamps        = .true.
   output_inflation         = .true.
   trace_execution          = .false.
   silence                  = .false.

   inf_flavor                  = 2,                       0
   inf_initial_from_restart    = .false.,                 .false.
   inf_sd_initial_from_restart = .false.,                 .false.
   inf_output_restart          = .true.,                  .true.
   inf_deterministic           = .true.,                  .true.
   inf_in_file_name            = 'prior_inf_ic_old',      'post_inf_ic_old'
   inf_out_file_name           = 'prior_inf_ic_new',      'post_inf_ic_new'
   inf_diag_file_name          = 'prior_inf_diag',        'post_inf_diag'
   inf_initial                 = 1.0,                     1.0
   inf_sd_initial              = 0.6,                      0.6
   inf_damping                 = 0.9,                     0.9
   inf_lower_bound             = 1.0,                     1.0
   inf_upper_bound             = 1000.0,                  1000.0
   inf_sd_lower_bound          = 0.6,                      0.6
  /

&smoother_nml
   num_lags              = 0
   start_from_restart    = .false.
   output_restart        = .false.
   restart_in_file_name  = 'smoother_ics'
   restart_out_file_name = 'smoother_restart'
  /

&ensemble_manager_nml
   single_restart_file_in  = .false.
   single_restart_file_out = .false.
   perturbation_amplitude  = 0.2
  /

&assim_tools_nml
   filter_kind                     = 1
   cutoff                          = 0.2
   sort_obs_inc                    = .true.
   spread_restoration              = .false.
   sampling_error_correction       = .false.
   adaptive_localization_threshold = -1
   print_every_nth_obs             = 0
  /

&cov_cutoff_nml
   select_localization = 1
  /

&reg_factor_nml
   select_regression    = 1
   input_reg_file       = "time_mean_reg"
   save_reg_diagnostics = .false.
   reg_diagnostics_file = "reg_diagnostics"
  /

&obs_sequence_nml
   write_binary_obs_sequence = .false.
  /

&obs_kind_nml
   assimilate_these_obs_types = 'RADIOSONDE_TEMPERATURE',
                                'ACARS_TEMPERATURE',
                                'AIRCRAFT_TEMPERATURE',
                                'RADIOSONDE_U_WIND_COMPONENT',
                                'RADIOSONDE_V_WIND_COMPONENT',
                                'AIRCRAFT_U_WIND_COMPONENT',
                                'AIRCRAFT_V_WIND_COMPONENT',
                                'ACARS_U_WIND_COMPONENT',
                                'ACARS_V_WIND_COMPONENT',
                                'SAT_U_WIND_COMPONENT',
                                'SAT_V_WIND_COMPONENT'
   evaluate_these_obs_types = 'RADIOSONDE_SPECIFIC_HUMIDITY'
  /

&assim_model_nml
   write_binary_restart_files = .false.
   netCDF_large_file_support  = .true.
  /

&model_nml
   output_state_vector = .false.
   time_step_days      = 0
   time_step_seconds   = 21600
   geometry_text_file  = 'noggeom.txt'
   debug = 1
  /

# advance_model.csh expects input filename of 'dart_old_vector'
&dart_to_nogaps_nml
   dart_to_nogaps_input_file = 'dart_old_vector'
   nogaps_restart_filename   = 'specfiles/shist000000'
   dart_data_time_filename   = 'dart_data.time'
   advance_time_present      = .true.
  /

# Both run_nogapsIC_to_dart.csh and advance_model.csh use these
# if you change them here, change them there too ...
&nogaps_to_dart_nml
   nogaps_restart_filename    = 'specfiles/shist000000'
   nogaps_data_time_filename  = 'CRDATE.dat'
   nogaps_to_dart_output_file = 'dart_new_vector'
  /

&location_nml
   horiz_dist_only             = .false.
   vert_normalization_pressure = 100000.0
   vert_normalization_height   = 10000.0
   vert_normalization_level    = 20.0
   approximate_distance        = .true.
   nlon                        = 71
   nlat                        = 36
   output_box_info             = .false.
  /

&utilities_nml
   TERMLEVEL      = 1
   module_details = .false.
   logfilename    = 'dart_log.out'
   nmlfilename    = 'dart_log.nml'
   write_nml      = 'file'
  /

&mpi_utilities_nml
   reverse_task_layout = .true.
  /

&preprocess_nml
    input_obs_def_mod_file = '../../../obs_def/DEFAULT_obs_def_mod.F90'
   output_obs_def_mod_file = '../../../obs_def/obs_def_mod.f90'
   input_obs_kind_mod_file = '../../../obs_kind/DEFAULT_obs_kind_mod.F90'
  output_obs_kind_mod_file = '../../../obs_kind/obs_kind_mod.f90'
   input_files             = '../../../obs_def/obs_def_reanalysis_bufr_mod.f90',
                             '../../../obs_def/obs_def_altimeter_mod.f90',
                             '../../../obs_def/obs_def_gps_mod.f90'
  /

&obs_sequence_tool_nml
   num_input_files   = 2
   filename_seq      = 'obs_seq.one', 'obs_seq.two'
   filename_out      = 'obs_seq.processed'
   first_obs_days    = -1
   first_obs_seconds = -1
   last_obs_days     = -1
   last_obs_seconds  = -1
   print_only        = .false.
   min_lat           = -90.0
   max_lat           =  90.0
   min_lon           =   0.0
   max_lon           = 360.0
   gregorian_cal     = .true.
  /

# other possible obs tool namelist items:
#
# keep only the U and V radiosonde winds:
#   obs_types          = 'RADIOSONDE_U_WIND_COMPONENT',
#                        'RADIOSONDE_V_WIND_COMPONENT'
#   keep_types         = .true.
#
# remove the U and V radiosonde winds:
#   obs_types          = 'RADIOSONDE_U_WIND_COMPONENT',
#                        'RADIOSONDE_V_WIND_COMPONENT'
#   keep_types         = .false.
#
# keep only observations with a DART QC of 0:
#   qc_metadata        = 'Dart quality control'
#   min_qc             = 0
#   max_qc             = 0
#
# keep only radiosonde temp obs between 250 and 300 K:
#   copy_metadata      = 'NCEP BUFR observation'
#   copy_type          = 'RADIOSONDE_TEMPERATURE'
#   min_copy           = 250.0
#   max_copy           = 300.0
#

&restart_file_tool_nml
   input_file_name              = "filter_restart"
   output_file_name             = "filter_updated_restart"
   ens_size                     = 1
   single_restart_file_in       = .true.
   single_restart_file_out      = .true.
   write_binary_restart_files   = .false.
   overwrite_data_time          = .false.
   new_data_days                = -1
   new_data_secs                = -1
   input_is_model_advance_file  = .false.
   output_is_model_advance_file = .false.
   overwrite_advance_time       = .false.
   new_advance_days             = -1
   new_advance_secs             = -1
   gregorian_cal                = .true.
  /

# The times in the namelist for the obs_diag program are vectors
# that follow the following sequence:
# year   month   day   hour   minute   second
# max_num_bins can be used to specify a fixed number of bins,
# in which case last_bin_center should be safely in the future.
#
# Acceptable latitudes range from  [-90,  90]
# Acceptable longitudes range from [  0, 360]

&obs_diag_nml
   obs_sequence_name = 'obs_seq.final'
   obs_sequence_list = ''
   first_bin_center =  2003, 1, 1, 6, 0, 0
   last_bin_center  =  2003, 1, 2, 0, 0, 0
   bin_separation   =     0, 0, 0, 6, 0, 0
   bin_width        =     0, 0, 0, 6, 0, 0
   time_to_skip     =     0, 0, 1, 0, 0, 0
   max_num_bins     = 1000
   input_qc_threshold = 3.0
   Nregions   = 4
   lonlim1    =   0.0,   0.0,   0.0, 235.0
   lonlim2    = 360.0, 360.0, 360.0, 295.0
   latlim1    =  20.0, -80.0, -20.0,  25.0
   latlim2    =  80.0, -20.0,  20.0,  55.0
   reg_names  = 'Northern Hemisphere', 'Southern Hemisphere', 'Tropics', 'North America'
   print_mismatched_locs = .false.
   verbose = .false.
  /

&schedule_nml
   calendar        = 'Gregorian'
   first_bin_start =  1601,  1,  1,  0,  0,  0
   first_bin_end   =  2999,  1,  1,  0,  0,  0
   last_bin_end    =  2999,  1,  1,  0,  0,  0
   bin_interval_days    = 1000000
   bin_interval_seconds = 0
   max_num_bins         = 1000
   print_table          = .true.
  /

&obs_seq_to_netcdf_nml
   obs_sequence_name = 'obs_seq.final'
   obs_sequence_list = ''
   append_to_netcdf  = .false.
   lonlim1    =    0.0
   lonlim2    =  360.0
   latlim1    =  -90.0
   latlim2    =   90.0
   verbose    = .false.
  /

&model_mod_check_nml
   input_file           = 'dart.ics'
   output_file          = 'check_me_out'
   advance_time_present = .false.
   verbose              = .true.
   x_ind                = 308097
   loc_of_interest      = 280.0, 40.0, 30.0
   kind_of_interest     = 'KIND_ANY'
  /

