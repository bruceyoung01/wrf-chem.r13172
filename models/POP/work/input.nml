&perfect_model_obs_nml
   start_from_restart    = .true.,
   output_restart        = .false.,
   async                 = 0,
   init_time_days        = -1,
   init_time_seconds     = -1,
   first_obs_days        = -1,
   first_obs_seconds     = -1,
   last_obs_days         = -1,
   last_obs_seconds      = -1,
   output_interval       = 1,
   trace_execution       = .false.,
   restart_in_file_name  = "perfect_ics",
   restart_out_file_name = "perfect_restart",
   obs_seq_in_file_name  = "obs_seq.in",
   obs_seq_out_file_name = "obs_seq.perfect",
   adv_ens_command       = "no_CESM_advance_script"
   output_timestamps     = .false.,
   trace_execution       = .false.,
   output_forward_op_errors = .false.,
   print_every_nth_obs   = -1,
   silence               = .false.,
  /

&filter_nml
   async                    = 4,
   adv_ens_command          = "no_CESM_advance_script",
   ens_size                 =  23,
   start_from_restart       = .true.,
   output_restart           = .true.,
   obs_sequence_in_name     = "obs_seq.out",
   obs_sequence_out_name    = "obs_seq.final",
   restart_in_file_name     = "filter_ics",
   restart_out_file_name    = "filter_restart",
   init_time_days           = -1,
   init_time_seconds        = -1,
   first_obs_days           = -1,
   first_obs_seconds        = -1,
   last_obs_days            = -1,
   last_obs_seconds         = -1,
   num_output_state_members = 10,
   num_output_obs_members   = 10,
   output_interval          = 1,
   num_groups               = 1,
   input_qc_threshold       =  1.0,
   outlier_threshold        =  3.0,
   output_forward_op_errors = .false.,
   output_timestamps        = .false.,
   output_inflation         = .true.,
   trace_execution          = .false.,
   silence                  = .false.,

   inf_flavor                  = 0,                       0,
   inf_initial_from_restart    = .false.,                 .false.,
   inf_sd_initial_from_restart = .false.,                 .false.,
   inf_output_restart          = .true.,                  .true.,
   inf_deterministic           = .true.,                  .true.,
   inf_in_file_name            = 'prior_inflate_ics',     'post_inflate_ics',
   inf_out_file_name           = 'prior_inflate_restart', 'post_inflate_restart',
   inf_diag_file_name          = 'prior_inflate_diag',    'post_inflate_diag',
   inf_initial                 = 1.0,                     1.0,
   inf_sd_initial              = 0.6,                     0.6,
   inf_damping                 = 0.9,                     0.9,
   inf_lower_bound             = 1.0,                     1.0,
   inf_upper_bound             = 1000000.0,               1000000.0,
   inf_sd_lower_bound          = 0.6,                     0.6
  /

&smoother_nml
   num_lags              = 0,
   start_from_restart    = .false.,
   output_restart        = .false.,
   restart_in_file_name  = 'smoother_ics',
   restart_out_file_name = 'smoother_restart'
  /

# cutoff of 0.03 (radians) is about 200km
&assim_tools_nml
   filter_kind                     = 1,
   cutoff                          = 0.20,
   sort_obs_inc                    = .false.,
   spread_restoration              = .false.,
   sampling_error_correction       = .false.,
   adaptive_localization_threshold = -1,
   output_localization_diagnostics = .false.,
   localization_diagnostics_file   = 'localization_diagnostics',
   print_every_nth_obs             = 0
  /

&ensemble_manager_nml
   single_restart_file_in  = .false.
   single_restart_file_out = .false.
   perturbation_amplitude  = 0.2
   layout                  = 1
   tasks_per_node          = 1
  /

&cov_cutoff_nml
   select_localization = 1
  /

&reg_factor_nml
   select_regression    = 1,
   input_reg_file       = "time_mean_reg",
   save_reg_diagnostics = .false.,
   reg_diagnostics_file = "reg_diagnostics"
  /

&obs_sequence_nml
   write_binary_obs_sequence = .false.
  /

&obs_kind_nml
   assimilate_these_obs_types = 'SALINITY',         'TEMPERATURE',
                            'APB_SALINITY',     'APB_TEMPERATURE',
                           'ADCP_SALINITY',    'ADCP_TEMPERATURE',
                           'ARGO_SALINITY',    'ARGO_TEMPERATURE',
                         'BOTTLE_SALINITY',  'BOTTLE_TEMPERATURE',
                            'CTD_SALINITY',     'CTD_TEMPERATURE',
                            'DBT_SALINITY',     'DBT_TEMPERATURE',
                        'DRIFTER_SALINITY', 'DRIFTER_TEMPERATURE',
                          'FLOAT_SALINITY',   'FLOAT_TEMPERATURE',
                         'GLIDER_SALINITY',  'GLIDER_TEMPERATURE',
                            'MBT_SALINITY',     'MBT_TEMPERATURE',
                        'MOORING_SALINITY', 'MOORING_TEMPERATURE',
                            'STD_SALINITY',     'STD_TEMPERATURE',
                           'TCTD_SALINITY',    'TCTD_TEMPERATURE',
                            'XBT_SALINITY',     'XBT_TEMPERATURE',
                           'XCTD_SALINITY',    'XCTD_TEMPERATURE',
    evaluate_these_obs_types = 'SEA_SURFACE_HEIGHT',
                                'U_CURRENT_COMPONENT',
                                'V_CURRENT_COMPONENT'
  /

&preprocess_nml
    input_obs_kind_mod_file = '../../../obs_kind/DEFAULT_obs_kind_mod.F90',
   output_obs_kind_mod_file = '../../../obs_kind/obs_kind_mod.f90',
     input_obs_def_mod_file = '../../../obs_def/DEFAULT_obs_def_mod.F90',
    output_obs_def_mod_file = '../../../obs_def/obs_def_mod.f90',
   input_files              = '../../../obs_def/obs_def_ocean_mod.f90'
  /

&assim_model_nml
   write_binary_restart_files = .true.,
   netCDF_large_file_support  = .true.
  /

&model_nml
   assimilation_period_days     = -1,
   assimilation_period_seconds  = -1,
   model_perturbation_amplitude = 0.2,
   output_state_vector          = .false.,
   debug                        = 0,
  /

&pop_to_dart_nml
   pop_to_dart_output_file  = 'dart_ics',
  /

&dart_to_pop_nml
   dart_to_pop_input_file   = 'dart_restart',
   advance_time_present     = .false.
  /

&location_nml
   horiz_dist_only             = .true.,
   vert_normalization_pressure = 100000.0,
   vert_normalization_height   = 10000.0,
   vert_normalization_level    = 20.0,
   approximate_distance        = .false.,
   nlon                        = 71,
   nlat                        = 36,
   output_box_info             = .true.
  /

&utilities_nml
   TERMLEVEL = 1,
   module_details = .false.,
   logfilename = 'dart_log.out',
   nmlfilename = 'dart_log.nml'
  /

&mpi_utilities_nml
   /

# Gregorian: 12 Z 1 January 1996 <==> DART: 144270 days 43200 seconds
# Gregorian: 12 Z 1 January 2000 <==> DART: 145731 days 43200 seconds

&restart_file_tool_nml
   input_file_name              = "dart_input",
   output_file_name             = "dart_output",
   ens_size                     = 1,
   single_restart_file_in       = .true.,
   single_restart_file_out      = .true.,
   write_binary_restart_files   = .true.,
   overwrite_data_time          = .false.,
   new_data_days                = -1,
   new_data_secs                = -1,
   input_is_model_advance_file  = .false.,
   output_is_model_advance_file = .false.,
   overwrite_advance_time       = .false.,
   new_advance_days             = -1,
   new_advance_secs             = -1,
   gregorian_cal                = .true.
  /

&obs_sequence_tool_nml
   num_input_files = 7,
   filename_seq    = '../observations/ssh_pseudo.obs_seq.out',
                     '../observations/gliders_t_pseudo.obs_seq.out',
                     '../observations/drifters_u_pseudo.obs_seq.out',
                     '../observations/drifters_v_pseudo.obs_seq.out',
                     '../observations/adcp_u_pseudo.obs_seq.out',
                     '../observations/adcp_v_pseudo.obs_seq.out',
                     '../observations/tmi_pseudo.obs_seq.out',
   filename_out    = 'obs_seq.out',
   gregorian_cal   = .true.
  /

# other possible obs tool namelist items:
#
# print out how many obs of each type are in the file:
#   print_only        = .true.,
#
# keep only obs in time period:
#   first_obs_days    = -1,
#   first_obs_seconds = -1,
#   last_obs_days     = -1,
#   last_obs_seconds  = -1,
#
# keep only obs in a bounding box:
#   min_lat           = -90.0,
#   max_lat           =  90.0,
#   min_lon           =   0.0,
#   max_lon           = 360.0,
#
# keep only the U and V radiosonde winds:
#   obs_types          = 'RADIOSONDE_U_WIND_COMPONENT',
#                        'RADIOSONDE_V_WIND_COMPONENT',
#   keep_types         = .true.,
#
# remove the U and V radiosonde winds:
#   obs_types          = 'RADIOSONDE_U_WIND_COMPONENT',
#                        'RADIOSONDE_V_WIND_COMPONENT',
#   keep_types         = .false.,
#
# keep only observations with a DART QC of 0:
#   qc_metadata        = 'Dart quality control',
#   min_qc             = 0,
#   max_qc             = 0,
#
# keep only radiosonde temp obs between 250 and 300 K:
#   copy_metadata      = 'NCEP BUFR observation',
#   copy_type          = 'RADIOSONDE_TEMPERATURE',
#   min_copy           = 250.0,
#   max_copy           = 300.0,
#

# The times in the namelist for the obs_diag program are vectors
# that follow the following sequence:
# year   month   day   hour   minute   second
# max_num_bins can be used to specify a fixed number of bins,
# in which case last_bin_center should be safely in the future.
#
# Acceptable latitudes range from  [-90,  90]
# Acceptable longitudes range from [  0, Inf]

&obs_diag_nml
   obs_sequence_name = 'obs_seq.final',
   obs_sequence_list = '',
   first_bin_center =  1998, 1, 3, 0, 0, 0 ,
   last_bin_center  =  1998, 2, 1, 0, 0, 0 ,
   bin_separation   =     0, 0, 1, 0, 0, 0 ,
   bin_width        =     0, 0, 1, 0, 0, 0 ,
   time_to_skip     =     0, 0, 0, 0, 0, 0 ,
   max_num_bins     = 1000,
   trusted_obs      = 'null',
   Nregions   = 4,
   lonlim1    = 30.0,  130.0, 290.0, 290,
   lonlim2    = 130.0, 270.0, 380.0, 380,
   latlim1    = -50.0, -50.0, -50.0,  20,
   latlim2    =  20.0,  50.0,  50.0,  50,
   reg_names  = 'Indian Ocean', 'Pacific', 'Atlantic', 'North Atlantic',
   print_mismatched_locs = .false.,
   create_rank_histogram = .true.,
   outliers_in_histogram = .true.,
   use_zero_error_obs    = .false.,
   verbose               = .true.,
   hlevel =  10.0,  20.0,   30.0,   40.0,  100.0,  
            200.0, 500.0, 1000.0, 2000.0, 
  /

&schedule_nml
   calendar        = 'Gregorian',
   first_bin_start =  1601,  1,  1,  0,  0,  0,
   first_bin_end   =  2999,  1,  1,  0,  0,  0,
   last_bin_end    =  2999,  1,  1,  0,  0,  0,
   bin_interval_days    = 1000000,
   bin_interval_seconds = 0,
   max_num_bins         = 1000,
   print_table          = .true.
  /

&obs_seq_to_netcdf_nml
   obs_sequence_name = 'obs_seq.final'
   obs_sequence_list = '',
   append_to_netcdf  = .false.,
   lonlim1    =    0.0,
   lonlim2    =  360.0,
   latlim1    =  -90.0,
   latlim2    =   90.0,
   verbose    = .false.
  /

&model_mod_check_nml
   dart_input_file       = 'dart_ics'
   output_file           = 'check_me'
   advance_time_present  = .FALSE.
   verbose               = .TRUE.
   test1thru             = 11
   loc_of_interest       = 320.0, 18.0, 5.0
   kind_of_interest      = 'KIND_U_CURRENT_COMPONENT'
   interp_test_lonrange  = 0.0, 359.0
   interp_test_dlon      = 1.0
   interp_test_latrange  = -89.0, 89.0
   interp_test_dlat      = 1.0
   interp_test_vertrange = 1000.0,  1005.0
   interp_test_dvert     = 2000.0
   interp_test_vertcoord = 'VERTISHEIGHT'
  /

